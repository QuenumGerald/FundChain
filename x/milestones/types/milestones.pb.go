// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fundchain/milestones/milestones.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Project struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Budget   uint64 `protobuf:"varint,3,opt,name=budget,proto3" json:"budget,omitempty"`
	IpfsHash string `protobuf:"bytes,4,opt,name=ipfsHash,proto3" json:"ipfsHash,omitempty"`
	VYes     uint64 `protobuf:"varint,5,opt,name=vYes,proto3" json:"vYes,omitempty"`
	VNo      uint64 `protobuf:"varint,6,opt,name=vNo,proto3" json:"vNo,omitempty"`
	Tranche  uint64 `protobuf:"varint,7,opt,name=tranche,proto3" json:"tranche,omitempty"`
	Status   string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Owner    string `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_be06917e5d50bab8, []int{0}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return m.Size()
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Project) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Project) GetBudget() uint64 {
	if m != nil {
		return m.Budget
	}
	return 0
}

func (m *Project) GetIpfsHash() string {
	if m != nil {
		return m.IpfsHash
	}
	return ""
}

func (m *Project) GetVYes() uint64 {
	if m != nil {
		return m.VYes
	}
	return 0
}

func (m *Project) GetVNo() uint64 {
	if m != nil {
		return m.VNo
	}
	return 0
}

func (m *Project) GetTranche() uint64 {
	if m != nil {
		return m.Tranche
	}
	return 0
}

func (m *Project) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Project) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type Milestone struct {
	ProjectId uint64   `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Hash      string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Attesters []string `protobuf:"bytes,3,rep,name=attesters,proto3" json:"attesters,omitempty"`
}

func (m *Milestone) Reset()         { *m = Milestone{} }
func (m *Milestone) String() string { return proto.CompactTextString(m) }
func (*Milestone) ProtoMessage()    {}
func (*Milestone) Descriptor() ([]byte, []int) {
	return fileDescriptor_be06917e5d50bab8, []int{1}
}
func (m *Milestone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Milestone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Milestone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Milestone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Milestone.Merge(m, src)
}
func (m *Milestone) XXX_Size() int {
	return m.Size()
}
func (m *Milestone) XXX_DiscardUnknown() {
	xxx_messageInfo_Milestone.DiscardUnknown(m)
}

var xxx_messageInfo_Milestone proto.InternalMessageInfo

func (m *Milestone) GetProjectId() uint64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *Milestone) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Milestone) GetAttesters() []string {
	if m != nil {
		return m.Attesters
	}
	return nil
}

func init() {
	proto.RegisterType((*Project)(nil), "fundchain.milestones.Project")
	proto.RegisterType((*Milestone)(nil), "fundchain.milestones.Milestone")
}

func init() {
	proto.RegisterFile("fundchain/milestones/milestones.proto", fileDescriptor_be06917e5d50bab8)
}

var fileDescriptor_be06917e5d50bab8 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xc1, 0x4e, 0xb3, 0x40,
	0x14, 0x85, 0x3b, 0x85, 0x42, 0x99, 0xc5, 0x9f, 0x3f, 0x93, 0xc6, 0x4c, 0x4c, 0x33, 0x21, 0x4d,
	0x4c, 0x58, 0xd5, 0x85, 0x89, 0x0f, 0xe0, 0x4a, 0x17, 0x1a, 0xc3, 0x4e, 0x5d, 0x51, 0xb8, 0x95,
	0x31, 0x95, 0x21, 0xcc, 0xa5, 0xea, 0x5b, 0xf8, 0x58, 0x2e, 0xeb, 0xce, 0xa5, 0x81, 0x17, 0x31,
	0x33, 0x94, 0xd2, 0xdd, 0xf9, 0x0e, 0xf7, 0x32, 0xe7, 0xe4, 0xd2, 0xb3, 0x75, 0x5d, 0x64, 0x69,
	0x9e, 0xc8, 0xe2, 0xfc, 0x55, 0x6e, 0x40, 0xa3, 0x2a, 0x40, 0x1f, 0xc9, 0x65, 0x59, 0x29, 0x54,
	0x6c, 0x76, 0x18, 0x5b, 0x0e, 0xdf, 0x16, 0xdf, 0x84, 0xfa, 0xf7, 0x95, 0x7a, 0x81, 0x14, 0xd9,
	0x3f, 0x3a, 0x96, 0x19, 0x27, 0x21, 0x89, 0xdc, 0x78, 0x2c, 0x33, 0x36, 0xa3, 0x13, 0x94, 0xb8,
	0x01, 0x3e, 0x0e, 0x49, 0x14, 0xc4, 0x1d, 0xb0, 0x13, 0xea, 0xad, 0xea, 0xec, 0x19, 0x90, 0x3b,
	0x76, 0x72, 0x4f, 0xec, 0x94, 0x4e, 0x65, 0xb9, 0xd6, 0xd7, 0x89, 0xce, 0xb9, 0x6b, 0x17, 0x0e,
	0xcc, 0x18, 0x75, 0xb7, 0x0f, 0xa0, 0xf9, 0xc4, 0x6e, 0x58, 0xcd, 0xfe, 0x53, 0x67, 0x7b, 0xa7,
	0xb8, 0x67, 0x2d, 0x23, 0x19, 0xa7, 0x3e, 0x56, 0x49, 0x91, 0xe6, 0xc0, 0x7d, 0xeb, 0xf6, 0x68,
	0xde, 0xd4, 0x98, 0x60, 0xad, 0xf9, 0xd4, 0xfe, 0x79, 0x4f, 0x26, 0xa1, 0x7a, 0x2b, 0xa0, 0xe2,
	0x41, 0x97, 0xd0, 0xc2, 0xe2, 0x89, 0x06, 0xb7, 0x7d, 0x43, 0x36, 0xa7, 0x41, 0xd9, 0xf5, 0xbb,
	0xe9, 0xbb, 0x0d, 0x86, 0x09, 0x96, 0x9b, 0xc0, 0x5d, 0x43, 0xab, 0xcd, 0x46, 0x82, 0x08, 0x1a,
	0xa1, 0xd2, 0xdc, 0x09, 0x9d, 0x28, 0x88, 0x07, 0xe3, 0xea, 0xf2, 0xab, 0x11, 0x64, 0xd7, 0x08,
	0xf2, 0xdb, 0x08, 0xf2, 0xd9, 0x8a, 0xd1, 0xae, 0x15, 0xa3, 0x9f, 0x56, 0x8c, 0x1e, 0xe7, 0xc3,
	0x1d, 0xde, 0x8f, 0x2f, 0x81, 0x1f, 0x25, 0xe8, 0x95, 0x67, 0xaf, 0x70, 0xf1, 0x17, 0x00, 0x00,
	0xff, 0xff, 0x70, 0xba, 0x26, 0x6a, 0xae, 0x01, 0x00, 0x00,
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMilestones(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMilestones(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if m.Tranche != 0 {
		i = encodeVarintMilestones(dAtA, i, uint64(m.Tranche))
		i--
		dAtA[i] = 0x38
	}
	if m.VNo != 0 {
		i = encodeVarintMilestones(dAtA, i, uint64(m.VNo))
		i--
		dAtA[i] = 0x30
	}
	if m.VYes != 0 {
		i = encodeVarintMilestones(dAtA, i, uint64(m.VYes))
		i--
		dAtA[i] = 0x28
	}
	if len(m.IpfsHash) > 0 {
		i -= len(m.IpfsHash)
		copy(dAtA[i:], m.IpfsHash)
		i = encodeVarintMilestones(dAtA, i, uint64(len(m.IpfsHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Budget != 0 {
		i = encodeVarintMilestones(dAtA, i, uint64(m.Budget))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMilestones(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMilestones(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Milestone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Milestone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Milestone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attesters) > 0 {
		for iNdEx := len(m.Attesters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Attesters[iNdEx])
			copy(dAtA[i:], m.Attesters[iNdEx])
			i = encodeVarintMilestones(dAtA, i, uint64(len(m.Attesters[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMilestones(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProjectId != 0 {
		i = encodeVarintMilestones(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMilestones(dAtA []byte, offset int, v uint64) int {
	offset -= sovMilestones(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilestones(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMilestones(uint64(l))
	}
	if m.Budget != 0 {
		n += 1 + sovMilestones(uint64(m.Budget))
	}
	l = len(m.IpfsHash)
	if l > 0 {
		n += 1 + l + sovMilestones(uint64(l))
	}
	if m.VYes != 0 {
		n += 1 + sovMilestones(uint64(m.VYes))
	}
	if m.VNo != 0 {
		n += 1 + sovMilestones(uint64(m.VNo))
	}
	if m.Tranche != 0 {
		n += 1 + sovMilestones(uint64(m.Tranche))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMilestones(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMilestones(uint64(l))
	}
	return n
}

func (m *Milestone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectId != 0 {
		n += 1 + sovMilestones(uint64(m.ProjectId))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMilestones(uint64(l))
	}
	if len(m.Attesters) > 0 {
		for _, s := range m.Attesters {
			l = len(s)
			n += 1 + l + sovMilestones(uint64(l))
		}
	}
	return n
}

func sovMilestones(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMilestones(x uint64) (n int) {
	return sovMilestones(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilestones
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestones
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestones
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Budget", wireType)
			}
			m.Budget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Budget |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestones
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestones
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VYes", wireType)
			}
			m.VYes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VYes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VNo", wireType)
			}
			m.VNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VNo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tranche", wireType)
			}
			m.Tranche = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tranche |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestones
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestones
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestones
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestones
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilestones(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMilestones
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Milestone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilestones
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Milestone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Milestone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestones
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestones
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attesters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestones
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestones
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attesters = append(m.Attesters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilestones(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMilestones
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMilestones(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMilestones
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMilestones
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMilestones
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMilestones
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMilestones
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMilestones        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMilestones          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMilestones = fmt.Errorf("proto: unexpected end of group")
)
