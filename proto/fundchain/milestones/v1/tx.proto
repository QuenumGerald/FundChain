syntax = "proto3";

package fundchain.milestones.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "fundchain/milestones/v1/params.proto";
import "gogoproto/gogo.proto";

option go_package = "fundchain/x/milestones/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // SubmitProject defines the SubmitProject RPC.
  rpc SubmitProject(MsgSubmitProject) returns (MsgSubmitProjectResponse);

  // VoteProject defines the VoteProject RPC.
  rpc VoteProject(MsgVoteProject) returns (MsgVoteProjectResponse);

  // AttestMilestone defines the AttestMilestone RPC.
  rpc AttestMilestone(MsgAttestMilestone) returns (MsgAttestMilestoneResponse);

  // ReleaseTranche defines the ReleaseTranche RPC.
  rpc ReleaseTranche(MsgReleaseTranche) returns (MsgReleaseTrancheResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "fundchain/x/milestones/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgSubmitProject defines the MsgSubmitProject message.
message MsgSubmitProject {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string title = 2;
  string budget = 3;
  string ipfs_hash = 4;
}

// MsgSubmitProjectResponse defines the MsgSubmitProjectResponse message.
message MsgSubmitProjectResponse {
  uint64 project_id = 1;
}

// MsgVoteProject defines the MsgVoteProject message.
message MsgVoteProject {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string project_id = 2;
  bool support = 3;
}

// MsgVoteProjectResponse defines the MsgVoteProjectResponse message.
message MsgVoteProjectResponse {}

// MsgAttestMilestone defines the MsgAttestMilestone message.
message MsgAttestMilestone {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string project_id = 2;
  string milestone_hash = 3;
}

// MsgAttestMilestoneResponse defines the MsgAttestMilestoneResponse message.
message MsgAttestMilestoneResponse {}

// MsgReleaseTranche defines the MsgReleaseTranche message.
message MsgReleaseTranche {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string project_id = 2;
}

// MsgReleaseTrancheResponse defines the MsgReleaseTrancheResponse message.
message MsgReleaseTrancheResponse {}
